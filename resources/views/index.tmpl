{{ define "index.tmpl"}}

    <style>
        .legend-item.filtered {
            text-decoration: line-through;
            opacity: 0.5;
        }
        .card img {
            width: 100%;
            height: 150px;
            object-fit: cover;
        }

        .card-title, .card-subtitle {
            font-size: 1em;
        }

         .legend-container {
            display: flex;
            justify-content: space-between;
            margin-top: 10px;
        }

        .map-legend {
            background: white;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
            width: 100%; /* Change to 100% */
            transition: width 0.3s ease; /* Add smooth transition */
        }

        .marker-cluster-custom {
            background-clip: padding-box;
            border-radius: 20px;
        }
        .marker-cluster-custom div {
            width: 30px;
            height: 30px;
            margin-left: 5px;
            margin-top: 5px;
            text-align: center;
            border-radius: 15px;
            font: 12px "Helvetica Neue", Arial, Helvetica, sans-serif;
            color: #ffffff;
            line-height: 30px;
        }

        .search-tip b {
            color: #fff;
        }
        .search-tip {
            white-space: nowrap;
        }
        .search-tip b {
            display: inline-block;
            clear: left;
            float: right;
            padding: 0 4px;
            margin-left: 4px;
        }
    </style>

    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"/>
  <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>

  <!-- Leaflet MarkerCluster CSS & JS -->
  <link rel="stylesheet" href="https://unpkg.com/leaflet.markercluster@1.5.3/dist/MarkerCluster.Default.css"/>
  <link rel="stylesheet" href="https://unpkg.com/leaflet.markercluster@1.5.3/dist/MarkerCluster.css"/>
  <script src="https://unpkg.com/leaflet.markercluster@1.5.3/dist/leaflet.markercluster.js"></script>

  <script src="https://opengeo.tech/maps/leaflet-search/src/leaflet-search.js"></script>
  <link rel="stylesheet" href="https://opengeo.tech/maps/leaflet-search/src/leaflet-search.css" />

{{ template "templates/layout.tmpl" .}}
<!-- Start about-info Area -->
<section class="price-area section-gap">
    <section id="peta_indonesia" class="about-info-area section-gap">
        <div class="container">
            <div class="title text-center">
                <h1 class="mb-10">Peta Lokasi Kejadian</h1>
                <br>
            </div>
            
            <div class="row">
                <div class="col-md-12">
                    <div class="form-inline">
                        <input type="hidden" class="form-control" id="tanggal_awal" name="tanggal_awal"/>
                        <input type="hidden" class="form-control" id="tanggal_akhir" name="tanggal_akhir"/>
                        <div id="reportrange" style="background: #fff; cursor: pointer; padding: 5px 10px; border: 1px solid #ccc" class="selectbox">
                            <i class="fa fa-calendar"></i>&nbsp;
                            <span></span> <i class="caret"></i>
                            <button onclick="searchData()" class="btn btn-primary">
                                <i class="fas fa-search fa-sm"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row align-items-center" style="margin-top:20px">
                <div id="map" style="width:100%;height:420px;"></div>
                <div class="legend-container">
                    <div id="legend-keamanan" class="map-legend"></div>
                    <div id="legend-keselamatan" class="map-legend"></div>
                </div>           
            </div>

            <!-- Add two containers for the charts -->
            <div class="row align-items-center" style="margin-top:20px">
                <div id="container-keamanan" style="width:100%;height:400px;"></div>
            </div>
            <div class="row align-items-center" style="margin-top:20px">
                <div id="container-keselamatan" style="width:100%;height:400px;"></div>
            </div>
        </div>
    </section>
</section>
{{ template "layouts/footer.tmpl" . }}
{{ template "layouts/script.tmpl" . }}

<script src="https://code.highcharts.com/highcharts.js"></script> <!-- Add this line to include Highcharts -->

<!-- BEGIN Declare Variable MAP -->
<script>
    const locationsPelanggaran = L.markerClusterGroup({
        chunkedLoading: true,
        chunkInterval: 50, // Adjust this value based on performance
        chunkDelay: 10,    // Adjust this value based on performance
        iconCreateFunction: function(cluster) {
            return L.divIcon({ 
                html: '<div style="background-color: #ff0000;">' + cluster.getChildCount() + '</div>',
                className: 'marker-cluster-custom',
                iconSize: L.point(40, 40)
            });
        }
    });

    const locationsKecelakaan = L.markerClusterGroup({
        chunkedLoading: true,
        chunkInterval: 50, // Adjust this value based on performance
        chunkDelay: 10,    // Adjust this value based on performance
        iconCreateFunction: function(cluster) {
            return L.divIcon({ 
                html: '<div style="background-color: #0000ff;">' + cluster.getChildCount() + '</div>',
                className: 'marker-cluster-custom',
                iconSize: L.point(40, 40)
            });
        }
    });

    const osm = L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
        maxZoom: 19,
        attribution: 'Â© OpenStreetMap'
    });
    const osmHOT = L.tileLayer('https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png', {
        maxZoom: 19,
        attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors, Tiles style by <a href="https://www.hotosm.org/" target="_blank">Humanitarian OpenStreetMap Team</a> hosted by <a href="https://openstreetmap.fr/" target="_blank">OpenStreetMap France</a>'
    });
    const OpenTopoMap = L.tileLayer('https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png', {
        maxZoom: 17,
        attribution: 'Map data: &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors, <a href="http://viewfinderpanoramas.org">SRTM</a> | Map style: &copy; <a href="https://opentopomap.org">OpenTopoMap</a> (<a href="https://creativecommons.org/licenses/by-sa/3.0/">CC-BY-SA</a>)'
    });

    // Set default active layers
    const defaultOverlayLayers = [locationsPelanggaran, locationsKecelakaan];

    const map = new L.Map('map', {
        center: { lat: -2.548926, lng: 118.0148634 },
        zoom: 5,
        layers: [osm, ...defaultOverlayLayers]
    });

    const baseMaps = {
        "OpenStreetMap": osm,
        "OpenStreetMap.HOT": osmHOT,
        "OpenTopoMap": OpenTopoMap
    };

    let overlayMaps = {
        "Pelanggaran": locationsPelanggaran,
        "Keselamatan": locationsKecelakaan
    };

    const indonesiaBorders = L.geoJSON();
    // Fetch Indonesia GeoJSON data
    fetch('https://raw.githubusercontent.com/nvkelso/natural-earth-vector/master/geojson/ne_10m_admin_0_countries.geojson')
    .then(response => response.json())
    .then(data => {
        // Filter for Indonesia
        const indonesiaFeature = data.features.find(feature => feature.properties.ISO_A3 === 'IDN');
        
        // Add Indonesia borders to map
        indonesiaBorders.addData(indonesiaFeature);
        indonesiaBorders.setStyle({
        color: '#FF0000',
        weight: 2,
        opacity: 0.8,
        fillColor: 'transparent'
        });
        
        indonesiaBorders.addTo(map);
        
        // Fit map bounds to Indonesia borders
        map.fitBounds(indonesiaBorders.getBounds());
    });
    // Add a layer control
    // overlayMaps["Indonesia Borders"] = indonesiaBorders

    const layerControl = L.control.layers(baseMaps, overlayMaps).addTo(map);

    $('.leaflet-control-layers-overlays input[type="checkbox"]').each(function(index) {
        $(this).attr('id', 'layer-checkbox-' + index);
    });

    L.control.search({
        layer: L.featureGroup([locationsPelanggaran, locationsKecelakaan]),
        propertyName: 'searchProperty',
        initial: false,
        marker: false,
        moveToLocation: function(latlng, title, map) {
            map.setView(latlng, 8);
        }
    }).addTo(map);
</script>
<!-- END -->

<!-- BEGIN calendar -->
<script type="text/javascript" src="https://cdn.jsdelivr.net/jquery/latest/jquery.min.js"></script>
<script type="text/javascript" src="https://cdn.jsdelivr.net/momentjs/latest/moment.min.js"></script>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.min.js"></script>
<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.css" />

<script type="text/javascript">
    const start = moment().startOf('year');
    const end = moment();
    var years = [];

    function cb(start, end) {
        years = [];
        $('#tanggal_awal').val(start.format('YYYY-MM-DD'));
        $('#tanggal_akhir').val(end.format('YYYY-MM-DD'));

        $('#reportrange span').html(start.format('MMMM D, YYYY') + ' - ' + end.format('MMMM D, YYYY'));

        // Update the year select options
        for (let year = start.year(); year <= end.year(); year++) {
            years.push(year);
        }
    }

    $('#reportrange').daterangepicker({
        startDate: start,
        endDate: moment(),
        maxDate: moment(),
        ranges: {
            'This Year': [moment().startOf('year'), moment()],
            'Last Year': [moment().subtract(1, 'year').startOf('year'), moment()],
            'Last 3 Year': [moment().subtract(2, 'year').startOf('year'), moment()],
            'Last 5 Year': [moment().subtract(4, 'year').startOf('year'), moment()],
        }
    }, cb);

    cb(start, end);
</script>

<script type="text/javascript">
    function searchData() {
        clearMarkers();  // Clear the existing markers
        resetMap();  // Reset the map to its default center and zoom level
        getDataAndRenderChart();  // Fetch and render new data
    }

    function resetMap() {
        // Reset the map to its original center and zoom level
        map.setView({ lat: -2.548926, lng: 118.0148634 }, 5);

        // Reset the layers to their default state
        Object.values(overlayMaps).forEach(layer => {
            if (map.hasLayer(layer)) {
                map.removeLayer(layer);
            }
        });
        defaultOverlayLayers.forEach(layer => map.addLayer(layer));
        
        // Reset the checkboxes to match the active layers
        $('.leaflet-control-layers-overlays input[type="checkbox"]').each(function(index) {
            $(this).attr('id', 'layer-checkbox-' + index);
        });

        // Reset the legend
        resetLegend();

        // Update legend layout
        updateLegendLayout();
    }

    function createLegends(jenisKejadianKeamanan, jenisKejadianKeselamatan) {
        function createLegendContent(title, items, colorStartIndex) {
            let labels = [`<strong>${title}</strong>`];
            const columns = 3;
            const itemsPerColumn = Math.ceil(items.length / columns);

            for (let i = 0; i < columns; i++) {
                labels.push('<div style="float:left; margin-right:10px;">');
                for (let j = i * itemsPerColumn; j < (i + 1) * itemsPerColumn && j < items.length; j++) {
                    const colorIndex = j + colorStartIndex;
                    labels.push(
                        `<div class="legend-item" data-type="${items[j].nama_kejadian}" style="cursor:pointer;">
                            <i style="background:${colorRandom[colorIndex]}; width: 10px; height: 10px; display: inline-block; border-radius: 50%;"></i> 
                            ${items[j].nama_kejadian}
                        </div>`
                    );
                }
                labels.push('</div>');
            }
            labels.push('<div style="clear:both;"></div>');
            return labels.join('');
        }

        document.getElementById('legend-keamanan').innerHTML = createLegendContent('Pelanggaran', jenisKejadianKeamanan.data.data_jenis_kejadian, 0);
        document.getElementById('legend-keselamatan').innerHTML = createLegendContent('Kecelakaan', jenisKejadianKeselamatan.data.data_jenis_kejadian, jenisKejadianKeamanan.data.data_jenis_kejadian.length);
    
         // Add event listeners for checkbox changes
        $('#layer-checkbox-0').change(function() {
            if (this.checked) {
                $('#legend-keamanan').show();
            } else {
                $('#legend-keamanan').hide();
            }
            updateLegendLayout()
        });

        $('#layer-checkbox-1').change(function() {
            if (this.checked) {
                $('#legend-keselamatan').show();
            } else {
                $('#legend-keselamatan').hide();
            }
            updateLegendLayout()
        });

        // Add after creating legends
        $('.legend-item').on('click', function() {
            const kejadianType = $(this).data('type');
            $(this).toggleClass('filtered'); // Toggle strikethrough class
            
            // Toggle opacity of markers based on type
            locationsPelanggaran.eachLayer(function(layer) {
                if (layer.feature && layer.feature.properties.type === kejadianType) {
                    if (layer.options.opacity === 1) {
                        layer.setStyle({opacity: 0.2, fillOpacity: 0.2});
                    } else {
                        layer.setStyle({opacity: 1, fillOpacity: 0.8});
                    }
                }
            });
            
            locationsKecelakaan.eachLayer(function(layer) {
                if (layer.feature && layer.feature.properties.type === kejadianType) {
                    if (layer.options.opacity === 1) {
                        layer.setStyle({opacity: 0.2, fillOpacity: 0.2});
                    } else {
                        layer.setStyle({opacity: 1, fillOpacity: 0.8});
                    }
                }
            });
        });


        // Initial visibility based on checkbox state
        $('#legend-keamanan').toggle($('#layer-checkbox-0').is(':checked'));
        $('#legend-keselamatan').toggle($('#layer-checkbox-1').is(':checked'));
    }

    function updateLegendLayout() {
        const keamananVisible = $('#layer-checkbox-0').is(':checked');
        const keselamatanVisible = $('#layer-checkbox-1').is(':checked');

        $('#legend-keamanan').toggle(keamananVisible);
        $('#legend-keselamatan').toggle(keselamatanVisible);

        const newWidth = (keamananVisible && keselamatanVisible) ? '48%' : '100%';
        $('#legend-keamanan, #legend-keselamatan').css('width', newWidth);
    }

    // Initial layout updateLegendLayout
    updateLegendLayout();

    function resetLegend() {
        // Clear the legend contents
        document.getElementById('legend-keamanan').innerHTML = '';
        document.getElementById('legend-keselamatan').innerHTML = '';

        // Reset legend visibility
    }

     function createPopupContent(data) {
        const baseUrl = `${window.location.protocol}//${window.location.host}`;
        // Periksa apakah URL gambar tersedia
        const imageUrl = data.file_image && data.file_image[0]?.url 
            ? `${baseUrl}/api/files/${data.file_image[0].url}`
            : null;

        // Hanya tambahkan elemen gambar jika URL ada
        const imageElement = imageUrl
            ? `<img src="${imageUrl}" alt="${data.jenis_kejadian.nama_kejadian}(${data.nama_kapal})" />`
            : '';

        return `
            <div class="card" style="width: 18rem;">
                ${imageElement}
                <div class="card-body">
                    <div class="title d-flex justify-content-between align-items-center mb-2">
                        <h5 class="card-title m-0">${data.jenis_kejadian.nama_kejadian}</h5>
                        <h6 class="card-subtitle text-muted m-0">${new Date(data.tanggal).toLocaleDateString()}</h6>
                    </div>
                    <h6 class="card-subtitle mb-2 text-muted">${data.nama_kapal}</h6>
                    <p class="card-text">${data.tindak_lanjut}</p>
                </div>
            </div>
        `;
      
    }

</script>
<!-- END -->

<!-- BEGIN MAP -->
<script type="text/javascript">
    function clearMarkers() {
        locationsPelanggaran.clearLayers();
        locationsKecelakaan.clearLayers();
    }

    const colorRandom = [
        // 25 Dark Colors
        '#800000', '#8B0000', '#A52A2A', '#B22222', '#DC143C', 
        '#8B008B', '#9400D3', '#4B0082', '#483D8B', '#191970',
        '#000080', '#00008B', '#0000CD', '#00008B', '#008B8B',
        '#006400', '#008000', '#228B22', '#2F4F4F', '#556B2F',
        '#8B4513', '#A0522D', '#6B8E23', '#7F0000', '#3A5F0B',

        // 25 Light Colors
        '#FFA07A', '#FFA500', '#FFD700', '#FFFF00', '#ADFF2F',
        '#7FFF00', '#00FF00', '#98FB98', '#00FA9A', '#00FFFF',
        '#E0FFFF', '#87CEFA', '#87CEEB', '#ADD8E6', '#B0E0E6',
        '#F0E68C', '#FAFAD2', '#FFFACD', '#FFEFD5', '#FFE4B5',
        '#FFDAB9', '#FFC0CB', '#FFB6C1', '#DDA0DD', '#EE82EE'
    ];

    function setMarkers(map, locations, initial) {
        const targetLayer = initial === 1 ? locationsPelanggaran : locationsKecelakaan;
        const jenisKejadian = initial === 1 ? jenisKejadianKeamanan.data.data_jenis_kejadian : jenisKejadianKeselamatan.data.data_jenis_kejadian;
        const colorOffset = initial === 2 ? jenisKejadianKeamanan.data.data_jenis_kejadian.length : 0;

        const markers = locations.map(a => {
            const indexColor = jenisKejadian.findIndex(b => b.id_jenis_kejadian === a.jenis_kejadian.id_jenis_kejadian) + colorOffset;
            
            const marker = L.circleMarker([a.latitude, a.longitude], {
                radius: 8,
                fillColor: colorRandom[indexColor],
                color: "#000",
                weight: 1,
                opacity: 1,
                fillOpacity: 0.8,
                searchProperty: `${a.jenis_kejadian.nama_kejadian} - ${a.nama_kapal} - ${a.lokasi_kejadian}`
            });

            marker.bindPopup(() => createPopupContent(a));
            marker.feature = {
                properties: {
                    type: a.jenis_kejadian.nama_kejadian
                }
            };

            return marker;
        });

        targetLayer.addLayers(markers);
    }


</script>
<!-- END -->

<!-- BEGIN TAHUN -->
<script type="text/javascript">

</script>
<!-- END -->>

<!-- BEGIN CALL -->
<script type="text/javascript">
    async function fetchData(url, initial) {
        return new Promise((resolve, reject) => {
            $.ajax({
                url: url,
                method: "POST",
                data: {
                    nik: {{.data.nik }},
                    tanggal_awal: $('#tanggal_awal').val(),
                    tanggal_akhir: $('#tanggal_akhir').val()
                },
                success: function(response) {
                    setMarkers(map, response.data[`data_kejadian_${initial === 1 ? 'keamanan' : 'keselamatan'}`], initial);
                    resolve(response);
                },
                error: function(response) {
                    Swal.fire({
                        type: 'error',
                        title: 'Oops!',
                        text: response.responseJSON.message
                    });
                    reject(response);
                }
            });
        });
    }

    async function jenisKejadian(klasifikasiName) {
        return new Promise((resolve, reject) => {
            $.ajax({
                url: window.origin + "/api/kejadian/listKejadian",
                method: "POST",
                data: {
                    klasifikasi_name: klasifikasiName
                },
                success: function(response) {
                    resolve(response);
                },
                error: function(response) {
                    Swal.fire({
                        type: 'error',
                        title: 'Oops!',
                        text: response.responseJSON.message
                    });
                    reject(response);
                }
            });
        });
    }

    let jenisKejadianKeamanan; // Declare a global variable
    let jenisKejadianKeselamatan; // Declare a global variable

    async function getDataAndRenderChart() {
        try {
            // For Jenis Keamanan Laut
            jenisKejadianKeamanan = await jenisKejadian("Keamanan Laut");
            // For Jenis Keselamatan Laut
            jenisKejadianKeselamatan = await jenisKejadian("Keselamatan Laut");

            const kejadianKeamanan = await fetchData("{{.dataKeamananURL}}", 1);
            const kejadianKeselamatan = await fetchData("{{.dataKeselamatanURL}}", 2);
            console.log('jenisKejadianKeamanan:', jenisKejadianKeamanan);
            console.log('jenisKejadianKeselamatan:', jenisKejadianKeselamatan);
            console.log('kejadianKeamanan:', kejadianKeamanan);

            // After setting markers, create the legend
            createLegends(jenisKejadianKeamanan, jenisKejadianKeselamatan);

            if (!kejadianKeamanan.data || !kejadianKeamanan.data.data_kejadian_keamanan) {
                throw new Error('data_kejadian_keamanan is undefined');
            }

            console.log('years:', years);

            // chart pelanggaran
            const x = kejadianKeamanan.data.data_kejadian_keamanan.reduce((acc, kejadian) => {
                const nama_kejadian = kejadian.jenis_kejadian.nama_kejadian;
                const date = new Date(kejadian.tanggal);
                const month = date.getMonth() + 1; // Fix: Changed tahun to date
                const year = date.getFullYear();
                const key = `${nama_kejadian}-${year}-${month}`;
                if (!acc[key]) {
                    acc[key] = 0;
                }
                acc[key]++;
                return acc;
            }, {});

            const data_pelanggaran = Object.keys(x).map(key => {
                const [nama_kejadian, year, month] = key.split('-');
                return {
                    periode: year,
                    bulan: month,
                    name: nama_kejadian,
                    jumlah: x[key]
                }
            });

            const months = ['Januari', 'Februari', 'Maret', 'April', 'Mei', 'Juni', 'Juli', 'Agustus', 'September', 'Oktober', 'November', 'Desember'];

            const years_data_pelanggaran = [...new Set(data_pelanggaran.map(item => {
                const monthName = months[parseInt(item.bulan) - 1];
                return `${monthName}-${item.periode}`;
            }))].sort((a,b) => {
                    const [monthA, yearA] = a.split('-');
                    const [monthB, yearB] = b.split('-'); 
                    return yearA === yearB ? 
                        months.indexOf(monthA) - months.indexOf(monthB) : 
                        yearA - yearB;
            });

            const kejadianTypesPelanggaran = jenisKejadianKeamanan.data.data_jenis_kejadian.map(k => k.nama_kejadian);

            // Create result object for each year
            const result_pelanggaran = years_data_pelanggaran.reduce((acc, monthYear) => {
                const [monthName, year] = monthYear.split('-');
                const monthNumber = (months.indexOf(monthName) + 1).toString();
                
                // Initialize counts array with 0s for each kejadian type
                const counts = kejadianTypesPelanggaran.map(type => {
                    const found = data_pelanggaran.find(d => 
                        d.periode === year && 
                        d.bulan === monthNumber && 
                        d.name === type
                    );
                    return found ? found.jumlah : 0;
                });
                
                acc[monthYear] = {
                    types: kejadianTypesPelanggaran,
                    counts: counts
                };
                return acc;
            }, {});

            // Create the line chart
            // Check if result has data
            if (Object.keys(result_pelanggaran).length > 0) {
                Highcharts.chart('container-keamanan', {
                    chart: {
                        type: 'line'
                    },
                    title: {
                        text: 'Trend Kejadian Pelanggaran'
                    },
                    xAxis: {
                        categories: years_data_pelanggaran,
                        title: {
                            text: 'Periode'
                        }
                    },
                    yAxis: {
                        title: {
                            text: 'Jumlah Kejadian'
                        },
                        min: 0
                    },
                    legend: {
                        layout: 'vertical',
                        align: 'right',
                        verticalAlign: 'middle',
                        enabled: true
                    },
                    plotOptions: {
                        line: {
                            dataLabels: {
                                enabled: true
                            }
                        }
                    },
                    series: jenisKejadianKeamanan.data.data_jenis_kejadian.map(type => ({
                        name: type.nama_kejadian,
                        data: years_data_pelanggaran.map(monthYear => {
                            const [monthName, year] = monthYear.split('-');
                            const monthNumber = (months.indexOf(monthName) + 1).toString();
                            const yearData = data_pelanggaran.find(d =>
                                d.periode === year &&
                                d.bulan === monthNumber &&
                                d.name === type.nama_kejadian
                            );
                            return yearData ? yearData.jumlah : 0;
                        })
                    }))
                });
            }

            // chart kecelakaan
            const y = kejadianKeselamatan.data.data_kejadian_keselamatan.reduce((acc, kejadian) => {
                const nama_kejadian = kejadian.jenis_kejadian.nama_kejadian;
                const date = new Date(kejadian.tanggal);
                const month = date.getMonth() + 1; // Fix: Changed tahun to date
                const year = date.getFullYear();
                const key = `${nama_kejadian}-${year}-${month}`;
                if (!acc[key]) {
                    acc[key] = 0;
                }
                acc[key]++;
                return acc;
            }, {});

            const data_kecelakaan = Object.keys(y).map(key => {
                const [nama_kejadian, year, month] = key.split('-');
                return {
                    periode: year,
                    bulan: month,
                    name: nama_kejadian,
                    jumlah: y[key]
                }
            });

            const years_data_kecelakaan = [...new Set(data_kecelakaan.map(item => {
                const monthName = months[parseInt(item.bulan) - 1];
                return `${monthName}-${item.periode}`;
            }))].sort((a,b) => {
                    const [monthA, yearA] = a.split('-');
                    const [monthB, yearB] = b.split('-'); 
                    return yearA === yearB ? 
                        months.indexOf(monthA) - months.indexOf(monthB) : 
                        yearA - yearB;
            });

            const kejadianTypesKecelakaan = jenisKejadianKeselamatan.data.data_jenis_kejadian.map(k => k.nama_kejadian);

            // Create result object for each year
            const result_kecelakaan = years_data_kecelakaan.reduce((acc, monthYear) => {
                const [monthName, year] = monthYear.split('-');
                const monthNumber = (months.indexOf(monthName) + 1).toString();
                
                // Initialize counts array with 0s for each kejadian type
                const counts = kejadianTypesKecelakaan.map(type => {
                    const found = data_kecelakaan.find(d => 
                        d.periode === year && 
                        d.bulan === monthNumber && 
                        d.name === type
                    );
                    return found ? found.jumlah : 0;
                });
                
                acc[monthYear] = {
                    types: kejadianTypesKecelakaan,
                    counts: counts
                };
                return acc;
            }, {});
            // Create the line chart
            // Check if result has data
            if (Object.keys(result_kecelakaan).length > 0) {
                Highcharts.chart('container-keselamatan', {
                    chart: {
                        type: 'line'
                    },
                    title: {
                        text: 'Trend Kejadian Kecelakaan'
                    },
                    xAxis: {
                        categories: years_data_kecelakaan,
                        title: {
                            text: 'Periode'
                        }
                    },
                    yAxis: {
                        title: {
                            text: 'Jumlah Kejadian'
                        },
                        min: 0
                    },
                    legend: {
                        layout: 'vertical',
                        align: 'right',
                        verticalAlign: 'middle',
                        enabled: true
                    },
                    plotOptions: {
                        line: {
                            dataLabels: {
                                enabled: true
                            }
                        }
                    },
                    series: jenisKejadianKeselamatan.data.data_jenis_kejadian.map(type => ({
                        name: type.nama_kejadian,
                        data: years_data_kecelakaan.map(monthYear => {
                            const [monthName, year] = monthYear.split('-');
                            const monthNumber = (months.indexOf(monthName) + 1).toString();
                            const yearData = data_kecelakaan.find(d =>
                                d.periode === year &&
                                d.bulan === monthNumber &&
                                d.name === type.nama_kejadian
                            );
                            return yearData ? yearData.jumlah : 0;
                        })
                    }))
                });
            }
        } catch (error) {
            console.error('Error fetching data:', error);
        }
    }

    getDataAndRenderChart();
</script>

<!-- END -->

{{ end }}
